// Find the hex code of the character by pressing ga in Vim. Prepend 0x100 to
// the hex code Vim gives. For example, if it says Hex 2016 in the command
// line, then 0x1002016 will give you the character.

xkb_keymap {
    xkb_keycodes "evdev_aliases(qwerty)" {
        minimum = 8;
        maximum = 255;
        <ESC> = 9;
        <AE01> = 10;
        <AE02> = 11;
        <AE03> = 12;
        <AE04> = 13;
        <AE05> = 14;
        <AE06> = 15;
        <AE07> = 16;
        <AE08> = 17;
        <AE09> = 18;
        <AE10> = 19;
        <AE11> = 20;
        <AE12> = 21;
        <BKSP> = 22;
        <TAB> = 23;
        <AD01> = 24;
        <AD02> = 25;
        <AD03> = 26;
        <AD04> = 27;
        <AD05> = 28;
        <AD06> = 29;
        <AD07> = 30;
        <AD08> = 31;
        <AD09> = 32;
        <AD10> = 33;
        <AD11> = 34;
        <AD12> = 35;
        <RTRN> = 36;
        <PRSC> = 37; // TODO, call LCTL
        <AC01> = 38;
        <AC02> = 39;
        <AC03> = 40;
        <AC04> = 41;
        <AC05> = 42;
        <AC06> = 43;
        <AC07> = 44;
        <AC08> = 45;
        <AC09> = 46;
        <AC10> = 47;
        <AC11> = 48;
        <TLDE> = 49;
        <LFSH> = 50;
        <BKSL> = 51;
        <AB01> = 52;
        <AB02> = 53;
        <AB03> = 54;
        <AB04> = 55;
        <AB05> = 56;
        <AB06> = 57;
        <AB07> = 58;
        <AB08> = 59;
        <AB09> = 60;
        <AB10> = 61;
        <RTSH> = 62;
        <LALT> = 64;
        <SPCE> = 65;
        <CAPS> = 66;
        <FK01> = 67;
        <FK02> = 68;
        <FK03> = 69;
        <FK04> = 70;
        <FK05> = 71;
        <FK06> = 72;
        <FK07> = 73;
        <FK08> = 74;
        <FK09> = 75;
        <FK10> = 76;
        <SCLK> = 78;
        <LVL3> = 92;
        <LSGT> = 94;
        <FK11> = 95;
        <FK12> = 96;
        <RCTL> = 105;
        <LCTL> = 107;
        <RALT> = 108;
        <LNFD> = 109;
        <HOME> = 110;
        <UP> = 111;
        <PGUP> = 112;
        <LEFT> = 113;
        <RGHT> = 114;
        <END> = 115;
        <DOWN> = 116;
        <PGDN> = 117;
        <INS> = 118;
        <DELE> = 119;
        <MUTE> = 121;
        <VOL-> = 122;
        <VOL+> = 123;
        <POWR> = 124;
        <I126> = 126;
        <PAUS> = 127;
        <I128> = 128; // Not there
        <I129> = 129; // Not there
        <HNGL> = 130; // Not there
        <HJCV> = 131; // Not there
        <LWIN> = 133;
        <RWIN> = 134; // Not there
        <COMP> = 135; // Not there
        <STOP> = 136; // Not there
        <AGAI> = 137; // Not there
        <PROP> = 138; // Not there
        <UNDO> = 139; // Not there
        <FRNT> = 140; // Not there
        <COPY> = 141; // Not there
        <OPEN> = 142; // Not there
        <PAST> = 143; // Not there
        <FIND> = 144; // Not there
        <CUT> = 145; // Not there
        <HELP> = 146; // Not there
        <I147> = 147; // Not there
        <I148> = 148; // Not there
        <I150> = 150; // Not there
        <I151> = 151;
        <I152> = 152; // Not there
        <I153> = 153; // Not there
        <I155> = 155; // Not there
        <I156> = 156; // Not there
        <I157> = 157; // Not there
        <I158> = 158; // Not there
        <I159> = 159; // Not there
        <I160> = 160; // Not there
        <I161> = 161; // Not there
        <I162> = 162; // Not there
        <I163> = 163; // Not there
        <I164> = 164; // Not there
        <I165> = 165; // Not there
        <I166> = 166; // Not there
        <I167> = 167; // Not there
        <I169> = 169; // Not there
        <I170> = 170; // Not there
        <I171> = 171; // Not there
        <I172> = 172;
        <I173> = 173;
        <I174> = 174;
        <I175> = 175;
        <I176> = 176;
        <I177> = 177;
        <I179> = 179;
        <I180> = 180;
        <I181> = 181;
        <I182> = 182;
        <I185> = 185;
        <I186> = 186;
        <I187> = 187;
        <I188> = 188;
        <I189> = 189;
        <I190> = 190;
        <FK13> = 191;
        <FK14> = 192;
        <FK15> = 193;
        <FK16> = 194;
        <FK17> = 195;
        <FK18> = 196;
        <FK20> = 198;
        <FK21> = 199;
        <FK22> = 200;
        <FK23> = 201;
        <MDSW> = 203;
        <ALT> = 204;
        <META> = 205;
        <SUPR> = 206;
        <HYPR> = 207;
        <I208> = 208;
        <I209> = 209;
        <I210> = 210;
        <I211> = 211;
        <I212> = 212;
        <I213> = 213;
        <I214> = 214;
        <I215> = 215;
        <I216> = 216;
        <I218> = 218;
        <I220> = 220;
        <I223> = 223;
        <I224> = 224;
        <I225> = 225;
        <I226> = 226;
        <I227> = 227;
        <I228> = 228;
        <I229> = 229;
        <I231> = 231;
        <I232> = 232;
        <I233> = 233;
        <I234> = 234;
        <I235> = 235;
        <I236> = 236;
        <I237> = 237;
        <I238> = 238;
        <I239> = 239;
        <I240> = 240;
        <I241> = 241;
        <I242> = 242;
        <I243> = 243;
        <I244> = 244;
        <I245> = 245;
        <I246> = 246;

        <VDEL> = 247; // virtual delete
        <VBS> = 248; // virtual backspace

    };

    xkb_types "complete" {

        virtual_modifiers NumLock,Alt,LevelThree,LAlt,RAlt,RControl,LControl,ScrollLock,LevelFive,AltGr,Meta,Super,Hyper;

        type "ONE_LEVEL" {
            modifiers= none;
            level_name[Level1]= "Any";
        };
        type "TWO_LEVEL" {
            modifiers= Shift;
            map[Shift]= Level2;
            level_name[Level1]= "Base";
            level_name[Level2]= "Shift";
        };
        type "ALPHABETIC" {
            modifiers= Shift+Lock;
            map[Shift]= Level2;
            map[Lock]= Level2;
            level_name[Level1]= "Base";
            level_name[Level2]= "Caps";
        };
        type "KEYPAD" {
            modifiers= Shift+NumLock;
            map[Shift]= Level2;
            map[NumLock]= Level2;
            level_name[Level1]= "Base";
            level_name[Level2]= "Number";
        };
        type "SHIFT+ALT" {
            modifiers= Shift+Alt;
            map[Shift+Alt]= Level2;
            level_name[Level1]= "Base";
            level_name[Level2]= "Shift+Alt";
        };
        type "PC_SUPER_LEVEL2" {
            modifiers= Mod4;
            map[Mod4]= Level2;
            level_name[Level1]= "Base";
            level_name[Level2]= "Super";
        };
        type "PC_CONTROL_LEVEL2" {
            modifiers= Control;
            map[Control]= Level2;
            level_name[Level1]= "Base";
            level_name[Level2]= "Control";
        };
        type "PC_LCONTROL_LEVEL2" {
            modifiers= LControl;
            map[LControl]= Level2;
            level_name[Level1]= "Base";
            level_name[Level2]= "LControl";
        };
        type "PC_RCONTROL_LEVEL2" {
            modifiers= RControl;
            map[RControl]= Level2;
            level_name[Level1]= "Base";
            level_name[Level2]= "RControl";
        };
        type "PC_ALT_LEVEL2" {
            modifiers= Alt;
            map[Alt]= Level2;
            level_name[Level1]= "Base";
            level_name[Level2]= "Alt";
        };
        type "PC_LALT_LEVEL2" {
            modifiers= LAlt;
            map[LAlt]= Level2;
            level_name[Level1]= "Base";
            level_name[Level2]= "LAlt";
        };
        type "PC_RALT_LEVEL2" {
            modifiers= RAlt;
            map[RAlt]= Level2;
            level_name[Level1]= "Base";
            level_name[Level2]= "RAlt";
        };
        type "CTRL+ALT" {
            modifiers= Shift+Control+Alt+LevelThree;
            map[Shift]= Level2;
            preserve[Shift]= Shift;
            map[LevelThree]= Level3;
            map[Shift+LevelThree]= Level4;
            preserve[Shift+LevelThree]= Shift;
            map[Control+Alt]= Level5;
            level_name[Level1]= "Base";
            level_name[Level2]= "Shift";
            level_name[Level3]= "Alt Base";
            level_name[Level4]= "Shift Alt";
            level_name[Level5]= "Ctrl+Alt";
        };
        type "LOCAL_EIGHT_LEVEL" {
            modifiers= Shift+Lock+Control+LevelThree;
            map[Shift]= Level2;
            map[Lock]= Level2;
            map[LevelThree]= Level3;
            map[Shift+Lock+LevelThree]= Level3;
            map[Shift+LevelThree]= Level4;
            map[Lock+LevelThree]= Level4;
            map[Control]= Level5;
            map[Shift+Lock+Control]= Level5;
            map[Shift+Control]= Level6;
            map[Lock+Control]= Level6;
            map[Control+LevelThree]= Level7;
            map[Shift+Lock+Control+LevelThree]= Level7;
            map[Shift+Control+LevelThree]= Level8;
            map[Lock+Control+LevelThree]= Level8;
            level_name[Level1]= "Base";
            level_name[Level2]= "Shift";
            level_name[Level3]= "Level3";
            level_name[Level4]= "Shift Level3";
            level_name[Level5]= "Ctrl";
            level_name[Level6]= "Shift Ctrl";
            level_name[Level7]= "Level3 Ctrl";
            level_name[Level8]= "Shift Level3 Ctrl";
        };
        type "THREE_LEVEL" {
            modifiers= Shift+LevelThree;
            map[Shift]= Level2;
            map[LevelThree]= Level3;
            map[Shift+LevelThree]= Level3;
            level_name[Level1]= "Base";
            level_name[Level2]= "Shift";
            level_name[Level3]= "Level3";
        };
        type "EIGHT_LEVEL" {
            modifiers= Shift+LevelThree+LevelFive;
            map[Shift]= Level2;
            map[LevelThree]= Level3;
            map[Shift+LevelThree]= Level4;
            map[LevelFive]= Level5;
            map[Shift+LevelFive]= Level6;
            map[LevelThree+LevelFive]= Level7;
            map[Shift+LevelThree+LevelFive]= Level8;
            level_name[Level1]= "Base";
            level_name[Level2]= "Shift";
            level_name[Level3]= "Alt Base";
            level_name[Level4]= "Shift Alt";
            level_name[Level5]= "X";
            level_name[Level6]= "X Shift";
            level_name[Level7]= "X Alt Base";
            level_name[Level8]= "X Shift Alt";
        };
        type "EIGHT_LEVEL_ALPHABETIC" {
            modifiers= Shift+Lock+LevelThree+LevelFive;
            map[Shift]= Level2;
            map[Lock]= Level2;
            map[LevelThree]= Level3;
            map[Shift+LevelThree]= Level4;
            map[Lock+LevelThree]= Level4;
            map[Shift+Lock+LevelThree]= Level3;
            map[LevelFive]= Level5;
            map[Shift+LevelFive]= Level6;
            map[Lock+LevelFive]= Level6;
            map[LevelThree+LevelFive]= Level7;
            map[Shift+LevelThree+LevelFive]= Level8;
            map[Lock+LevelThree+LevelFive]= Level8;
            map[Shift+Lock+LevelThree+LevelFive]= Level7;
            level_name[Level1]= "Base";
            level_name[Level2]= "Shift";
            level_name[Level3]= "Alt Base";
            level_name[Level4]= "Shift Alt";
            level_name[Level5]= "X";
            level_name[Level6]= "X Shift";
            level_name[Level7]= "X Alt Base";
            level_name[Level8]= "X Shift Alt";
        };
        type "EIGHT_LEVEL_SEMIALPHABETIC" {
            modifiers= Shift+Lock+LevelThree+LevelFive;
            map[Shift]= Level2;
            map[Lock]= Level2;
            map[LevelThree]= Level3;
            map[Shift+LevelThree]= Level4;
            map[Lock+LevelThree]= Level3;
            preserve[Lock+LevelThree]= Lock;
            map[Shift+Lock+LevelThree]= Level4;
            preserve[Shift+Lock+LevelThree]= Lock;
            map[LevelFive]= Level5;
            map[Shift+LevelFive]= Level6;
            map[Lock+LevelFive]= Level6;
            preserve[Lock+LevelFive]= Lock;
            map[Shift+Lock+LevelFive]= Level6;
            preserve[Shift+Lock+LevelFive]= Lock;
            map[LevelThree+LevelFive]= Level7;
            map[Shift+LevelThree+LevelFive]= Level8;
            map[Lock+LevelThree+LevelFive]= Level7;
            preserve[Lock+LevelThree+LevelFive]= Lock;
            map[Shift+Lock+LevelThree+LevelFive]= Level8;
            preserve[Shift+Lock+LevelThree+LevelFive]= Lock;
            level_name[Level1]= "Base";
            level_name[Level2]= "Shift";
            level_name[Level3]= "Alt Base";
            level_name[Level4]= "Shift Alt";
            level_name[Level5]= "X";
            level_name[Level6]= "X Shift";
            level_name[Level7]= "X Alt Base";
            level_name[Level8]= "X Shift Alt";
        };
        type "FOUR_LEVEL" {
            modifiers= Shift+LevelThree;
            map[Shift]= Level2;
            map[LevelThree]= Level3;
            map[Shift+LevelThree]= Level4;
            level_name[Level1]= "Base";
            level_name[Level2]= "Shift";
            level_name[Level3]= "Alt Base";
            level_name[Level4]= "Shift Alt";
        };
        type "FOUR_LEVEL_ALPHABETIC" {
            modifiers= Shift+Lock+LevelThree;
            map[Shift]= Level2;
            map[Lock]= Level2;
            map[LevelThree]= Level3;
            map[Shift+LevelThree]= Level4;
            map[Lock+LevelThree]= Level4;
            map[Shift+Lock+LevelThree]= Level3;
            level_name[Level1]= "Base";
            level_name[Level2]= "Shift";
            level_name[Level3]= "Alt Base";
            level_name[Level4]= "Shift Alt";
        };
        type "FOUR_LEVEL_SEMIALPHABETIC" {
            modifiers= Shift+Lock+LevelThree;
            map[Shift]= Level2;
            map[Lock]= Level2;
            map[LevelThree]= Level3;
            map[Shift+LevelThree]= Level4;
            map[Lock+LevelThree]= Level3;
            preserve[Lock+LevelThree]= Lock;
            map[Shift+Lock+LevelThree]= Level4;
            preserve[Shift+Lock+LevelThree]= Lock;
            level_name[Level1]= "Base";
            level_name[Level2]= "Shift";
            level_name[Level3]= "Alt Base";
            level_name[Level4]= "Shift Alt";
        };
        type "FOUR_LEVEL_X" {
            modifiers= Shift+Control+Alt+LevelThree;
            map[LevelThree]= Level2;
            map[Shift+LevelThree]= Level3;
            map[Control+Alt]= Level4;
            level_name[Level1]= "Base";
            level_name[Level2]= "Alt Base";
            level_name[Level3]= "Shift Alt";
            level_name[Level4]= "Ctrl+Alt";
        };
        type "SEPARATE_CAPS_AND_SHIFT_ALPHABETIC" {
            modifiers= Shift+Lock+LevelThree;
            map[Shift]= Level2;
            map[Lock]= Level4;
            preserve[Lock]= Lock;
            map[LevelThree]= Level3;
            map[Shift+LevelThree]= Level4;
            map[Lock+LevelThree]= Level3;
            preserve[Lock+LevelThree]= Lock;
            map[Shift+Lock+LevelThree]= Level3;
            level_name[Level1]= "Base";
            level_name[Level2]= "Shift";
            level_name[Level3]= "AltGr Base";
            level_name[Level4]= "Shift AltGr";
        };
        type "FOUR_LEVEL_PLUS_LOCK" {
            modifiers= Shift+Lock+LevelThree;
            map[Shift]= Level2;
            map[LevelThree]= Level3;
            map[Shift+LevelThree]= Level4;
            map[Lock]= Level5;
            map[Shift+Lock]= Level2;
            map[Lock+LevelThree]= Level3;
            map[Shift+Lock+LevelThree]= Level4;
            level_name[Level1]= "Base";
            level_name[Level2]= "Shift";
            level_name[Level3]= "Alt Base";
            level_name[Level4]= "Shift Alt";
            level_name[Level5]= "Lock";
        };
    };

    xkb_compatibility "complete" {

        virtual_modifiers NumLock,Alt,LevelThree,LAlt,RAlt,RControl,LControl,ScrollLock,LevelFive,AltGr,Meta,Super,Hyper;

        interpret.useModMapMods= AnyLevel;
        interpret.repeat= False;
        interpret.locking= False;

        // keysyms in the XK_3270 section of /usr/include/X11/keysymdef.h
        // appears to be unused. So I repurpose them.
        interpret 0xfd01 {
            repeat= True;
            action= RedirectKey(keycode=<VBS>); 
        };
        interpret 0xfd02 {
            repeat= True;
            action= RedirectKey(keycode=<VDEL>); 
        };

        interpret osfDown {
            repeat= True;
            action= RedirectKey(keycode=<DOWN>);
        };
        interpret osfUp {
            repeat= True;
            action= RedirectKey(keycode=<UP>);
        };
        interpret osfRight {
            repeat= True;
            action= RedirectKey(keycode=<RGHT>);
        };
        interpret osfLeft {
            repeat= True;
            action= RedirectKey(keycode=<LEFT>);
        };

        interpret ISO_Level2_Latch+Exactly(Shift) {
            useModMapMods=level1;
            action= LatchMods(modifiers=Shift,clearLocks,latchToLock);
        };
        interpret Shift_Lock+AnyOf(Shift+Lock) {
            action= LockMods(modifiers=Shift);
        };
        interpret Num_Lock+AnyOf(all) {
            virtualModifier= NumLock;
            action= LockMods(modifiers=NumLock);
        };
        interpret ISO_Level3_Shift+AnyOf(all) {
            virtualModifier= LevelThree;
            useModMapMods=level1;
            action= SetMods(modifiers=LevelThree,clearLocks);
        };
        interpret ISO_Level3_Latch+AnyOf(all) {
            virtualModifier= LevelThree;
            useModMapMods=level1;
            action= LatchMods(modifiers=LevelThree,clearLocks,latchToLock);
        };
        interpret ISO_Level3_Lock+AnyOf(all) {
            virtualModifier= LevelThree;
            useModMapMods=level1;
            action= LockMods(modifiers=LevelThree);
        };
        interpret Alt_L+AnyOf(all) {
            virtualModifier= Alt;
            action= SetMods(modifiers=modMapMods,clearLocks);
        };
        interpret Alt_R+AnyOf(all) {
            virtualModifier= Alt;
            action= SetMods(modifiers=modMapMods,clearLocks);
        };
        interpret Meta_L+AnyOf(all) {
            virtualModifier= Meta;
            action= SetMods(modifiers=modMapMods,clearLocks);
        };
        interpret Meta_R+AnyOf(all) {
            virtualModifier= Meta;
            action= SetMods(modifiers=modMapMods,clearLocks);
        };
        interpret Super_L+AnyOf(all) {
            virtualModifier= Super;
            action= SetMods(modifiers=modMapMods,clearLocks);
        };
        interpret Super_R+AnyOf(all) {
            virtualModifier= Super;
            action= SetMods(modifiers=modMapMods,clearLocks);
        };
        interpret Hyper_L+AnyOf(all) {
            virtualModifier= Hyper;
            action= SetMods(modifiers=modMapMods,clearLocks);
        };
        interpret Hyper_R+AnyOf(all) {
            virtualModifier= Hyper;
            action= SetMods(modifiers=modMapMods,clearLocks);
        };
        interpret Scroll_Lock+AnyOf(all) {
            virtualModifier= ScrollLock;
            action= LockMods(modifiers=modMapMods);
        };
        interpret ISO_Level5_Shift+AnyOf(all) {
            virtualModifier= LevelFive;
            useModMapMods=level1;
            action= SetMods(modifiers=LevelFive,clearLocks);
        };
        interpret ISO_Level5_Latch+AnyOf(all) {
            virtualModifier= LevelFive;
            useModMapMods=level1;
            action= LatchMods(modifiers=LevelFive,clearLocks,latchToLock);
        };
        interpret ISO_Level5_Lock+AnyOf(all) {
            virtualModifier= LevelFive;
            useModMapMods=level1;
            action= LockMods(modifiers=LevelFive);
        };
        interpret Mode_switch+AnyOfOrNone(all) {
            virtualModifier= AltGr;
            useModMapMods=level1;
            action= SetGroup(group=+1);
        };
        interpret ISO_Level3_Shift+AnyOfOrNone(all) {
            action= SetMods(modifiers=LevelThree,clearLocks);
        };
        interpret ISO_Level3_Latch+AnyOfOrNone(all) {
            action= LatchMods(modifiers=LevelThree,clearLocks); //,latchToLock);
            // Getting rid of "latchToLock" prevents accidentaly getting stuck in
            // my "umlaut-mode" upon pressing latches consequently.
        };
        interpret ISO_Level3_Lock+AnyOfOrNone(all) {
            action= LockMods(modifiers=LevelThree);
        };
        interpret ISO_Group_Latch+AnyOfOrNone(all) {
            virtualModifier= AltGr;
            useModMapMods=level1;
            action= LatchGroup(group=2);
        };
        interpret ISO_Next_Group+AnyOfOrNone(all) {
            virtualModifier= AltGr;
            useModMapMods=level1;
            action= LockGroup(group=+1);
        };
        interpret ISO_Prev_Group+AnyOfOrNone(all) {
            virtualModifier= AltGr;
            useModMapMods=level1;
            action= LockGroup(group=-1);
        };
        interpret ISO_First_Group+AnyOfOrNone(all) {
            action= LockGroup(group=1);
        };
        interpret ISO_Last_Group+AnyOfOrNone(all) {
            action= LockGroup(group=2);
        };
        interpret KP_1+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=-1,y=+1);
        };
        interpret KP_End+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=-1,y=+1);
        };
        interpret KP_2+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=+0,y=+1);
        };
        interpret KP_Down+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=+0,y=+1);
        };
        interpret KP_3+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=+1,y=+1);
        };
        interpret KP_Next+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=+1,y=+1);
        };
        interpret KP_4+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=-1,y=+0);
        };
        interpret KP_Left+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=-1,y=+0);
        };
        interpret KP_6+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=+1,y=+0);
        };
        interpret KP_Right+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=+1,y=+0);
        };
        interpret KP_7+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=-1,y=-1);
        };
        interpret KP_Home+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=-1,y=-1);
        };
        interpret KP_8+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=+0,y=-1);
        };
        interpret KP_Up+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=+0,y=-1);
        };
        interpret KP_9+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=+1,y=-1);
        };
        interpret KP_Prior+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=+1,y=-1);
        };
        interpret KP_5+AnyOfOrNone(all) {
            repeat= True;
            action= PtrBtn(button=default);
        };
        interpret KP_Begin+AnyOfOrNone(all) {
            repeat= True;
            action= PtrBtn(button=default);
        };
        interpret KP_F2+AnyOfOrNone(all) {
            repeat= True;
            action= SetPtrDflt(affect=button,button=1);
        };
        interpret KP_Divide+AnyOfOrNone(all) {
            repeat= True;
            action= SetPtrDflt(affect=button,button=1);
        };
        interpret KP_F3+AnyOfOrNone(all) {
            repeat= True;
            action= SetPtrDflt(affect=button,button=2);
        };
        interpret KP_Multiply+AnyOfOrNone(all) {
            repeat= True;
            action= SetPtrDflt(affect=button,button=2);
        };
        interpret KP_F4+AnyOfOrNone(all) {
            repeat= True;
            action= SetPtrDflt(affect=button,button=3);
        };
        interpret KP_Subtract+AnyOfOrNone(all) {
            repeat= True;
            action= SetPtrDflt(affect=button,button=3);
        };
        interpret KP_Separator+AnyOfOrNone(all) {
            repeat= True;
            action= PtrBtn(button=default,count=2);
        };
        interpret KP_Add+AnyOfOrNone(all) {
            repeat= True;
            action= PtrBtn(button=default,count=2);
        };
        interpret KP_0+AnyOfOrNone(all) {
            repeat= True;
            action= LockPtrBtn(button=default,affect=lock);
        };
        interpret KP_Insert+AnyOfOrNone(all) {
            repeat= True;
            action= LockPtrBtn(button=default,affect=lock);
        };
        interpret KP_Decimal+AnyOfOrNone(all) {
            repeat= True;
            action= LockPtrBtn(button=default,affect=unlock);
        };
        interpret KP_Delete+AnyOfOrNone(all) {
            repeat= True;
            action= LockPtrBtn(button=default,affect=unlock);
        };
        interpret F25+AnyOfOrNone(all) {
            repeat= True;
            action= SetPtrDflt(affect=button,button=1);
        };
        interpret F26+AnyOfOrNone(all) {
            repeat= True;
            action= SetPtrDflt(affect=button,button=2);
        };
        interpret F27+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=-1,y=-1);
        };
        interpret F29+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=+1,y=-1);
        };
        interpret F31+AnyOfOrNone(all) {
            repeat= True;
            action= PtrBtn(button=default);
        };
        interpret F33+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=-1,y=+1);
        };
        interpret F35+AnyOfOrNone(all) {
            repeat= True;
            action= MovePtr(x=+1,y=+1);
        };
        interpret Pointer_Button_Dflt+AnyOfOrNone(all) {
            action= PtrBtn(button=default);
        };
        interpret Pointer_Button1+AnyOfOrNone(all) {
            action= PtrBtn(button=1);
        };
        interpret Pointer_Button2+AnyOfOrNone(all) {
            action= PtrBtn(button=2);
        };
        interpret Pointer_Button3+AnyOfOrNone(all) {
            action= PtrBtn(button=3);
        };
        interpret Pointer_DblClick_Dflt+AnyOfOrNone(all) {
            action= PtrBtn(button=default,count=2);
        };
        interpret Pointer_DblClick1+AnyOfOrNone(all) {
            action= PtrBtn(button=1,count=2);
        };
        interpret Pointer_DblClick2+AnyOfOrNone(all) {
            action= PtrBtn(button=2,count=2);
        };
        interpret Pointer_DblClick3+AnyOfOrNone(all) {
            action= PtrBtn(button=3,count=2);
        };
        interpret Pointer_Drag_Dflt+AnyOfOrNone(all) {
            action= LockPtrBtn(button=default,affect=both);
        };
        interpret Pointer_Drag1+AnyOfOrNone(all) {
            action= LockPtrBtn(button=1,affect=both);
        };
        interpret Pointer_Drag2+AnyOfOrNone(all) {
            action= LockPtrBtn(button=2,affect=both);
        };
        interpret Pointer_Drag3+AnyOfOrNone(all) {
            action= LockPtrBtn(button=3,affect=both);
        };
        interpret Pointer_EnableKeys+AnyOfOrNone(all) {
            action= LockControls(controls=MouseKeys);
        };
        interpret Pointer_Accelerate+AnyOfOrNone(all) {
            action= LockControls(controls=MouseKeysAccel);
        };
        interpret Pointer_DfltBtnNext+AnyOfOrNone(all) {
            action= SetPtrDflt(affect=button,button=+1);
        };
        interpret Pointer_DfltBtnPrev+AnyOfOrNone(all) {
            action= SetPtrDflt(affect=button,button=-1);
        };
        interpret AccessX_Enable+AnyOfOrNone(all) {
            action= LockControls(controls=AccessXKeys);
        };
        interpret AccessX_Feedback_Enable+AnyOfOrNone(all) {
            action= LockControls(controls=AccessXFeedback);
        };
        interpret RepeatKeys_Enable+AnyOfOrNone(all) {
            action= LockControls(controls=RepeatKeys);
        };
        interpret SlowKeys_Enable+AnyOfOrNone(all) {
            action= LockControls(controls=SlowKeys);
        };
        interpret BounceKeys_Enable+AnyOfOrNone(all) {
            action= LockControls(controls=BounceKeys);
        };
        interpret StickyKeys_Enable+AnyOfOrNone(all) {
            action= LockControls(controls=StickyKeys);
        };
        interpret MouseKeys_Enable+AnyOfOrNone(all) {
            action= LockControls(controls=MouseKeys);
        };
        interpret MouseKeys_Accel_Enable+AnyOfOrNone(all) {
            action= LockControls(controls=MouseKeysAccel);
        };
        interpret Overlay1_Enable+AnyOfOrNone(all) {
            action= LockControls(controls=Overlay1);
        };
        interpret Overlay2_Enable+AnyOfOrNone(all) {
            action= LockControls(controls=Overlay2);
        };
        interpret AudibleBell_Enable+AnyOfOrNone(all) {
            action= LockControls(controls=AudibleBell);
        };
        interpret Terminate_Server+AnyOfOrNone(all) {
            action= Terminate();
        };
        interpret Alt_L+AnyOfOrNone(all) {
            action= SetMods(modifiers=Alt,clearLocks);
        };
        interpret Alt_R+AnyOfOrNone(all) {
            action= SetMods(modifiers=Alt,clearLocks);
        };
        interpret Meta_L+AnyOfOrNone(all) {
            action= SetMods(modifiers=Meta,clearLocks);
        };
        interpret Meta_R+AnyOfOrNone(all) {
            action= SetMods(modifiers=Meta,clearLocks);
        };
        interpret Super_L+AnyOfOrNone(all) {
            action= SetMods(modifiers=Super,clearLocks);
        };
        interpret Super_R+AnyOfOrNone(all) {
            action= SetMods(modifiers=Super,clearLocks);
        };
        interpret Hyper_L+AnyOfOrNone(all) {
            action= SetMods(modifiers=Hyper,clearLocks);
        };
        interpret Hyper_R+AnyOfOrNone(all) {
            action= SetMods(modifiers=Hyper,clearLocks);
        };
        interpret Shift_L+AnyOfOrNone(all) {
            action= SetMods(modifiers=Shift,clearLocks);
        };
        interpret XF86Switch_VT_1+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=1,!same);
        };
        interpret XF86Switch_VT_2+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=2,!same);
        };
        interpret XF86Switch_VT_3+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=3,!same);
        };
        interpret XF86Switch_VT_4+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=4,!same);
        };
        interpret XF86Switch_VT_5+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=5,!same);
        };
        interpret XF86Switch_VT_6+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=6,!same);
        };
        interpret XF86Switch_VT_7+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=7,!same);
        };
        interpret XF86Switch_VT_8+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=8,!same);
        };
        interpret XF86Switch_VT_9+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=9,!same);
        };
        interpret XF86Switch_VT_10+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=10,!same);
        };
        interpret XF86Switch_VT_11+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=11,!same);
        };
        interpret XF86Switch_VT_12+AnyOfOrNone(all) {
            repeat= True;
            action= SwitchScreen(screen=12,!same);
        };
        interpret XF86LogGrabInfo+AnyOfOrNone(all) {
            repeat= True;
            action= Private(type=0x86,data[0]=0x50,data[1]=0x72,data[2]=0x47,data[3]=0x72,data[4]=0x62,data[5]=0x73,data[6]=0x00);
        };
        interpret XF86LogWindowTree+AnyOfOrNone(all) {
            repeat= True;
            action= Private(type=0x86,data[0]=0x50,data[1]=0x72,data[2]=0x57,data[3]=0x69,data[4]=0x6e,data[5]=0x73,data[6]=0x00);
        };
        interpret XF86Next_VMode+AnyOfOrNone(all) {
            repeat= True;
            action= Private(type=0x86,data[0]=0x2b,data[1]=0x56,data[2]=0x4d,data[3]=0x6f,data[4]=0x64,data[5]=0x65,data[6]=0x00);
        };
        interpret XF86Prev_VMode+AnyOfOrNone(all) {
            repeat= True;
            action= Private(type=0x86,data[0]=0x2d,data[1]=0x56,data[2]=0x4d,data[3]=0x6f,data[4]=0x64,data[5]=0x65,data[6]=0x00);
        };
        interpret ISO_Level5_Shift+AnyOfOrNone(all) {
            action= SetMods(modifiers=LevelFive,clearLocks);
        };
        interpret ISO_Level5_Latch+AnyOfOrNone(all) {
            action= LatchMods(modifiers=LevelFive,clearLocks,latchToLock);
        };
        interpret ISO_Level5_Lock+AnyOfOrNone(all) {
            action= LockMods(modifiers=LevelFive);
        };
        interpret Caps_Lock+AnyOfOrNone(all) {
            action= LockMods(modifiers=Lock);
        };
        interpret Any+Exactly(Lock) {
            action= LockMods(modifiers=Lock);
        };
        interpret Any+AnyOf(all) {
            action= SetMods(modifiers=modMapMods,clearLocks);
        };
        group 2 = AltGr;
        group 3 = AltGr;
        group 4 = AltGr;
        indicator "Caps Lock" {
            !allowExplicit;
            whichModState= locked;
            modifiers= Lock;
        };
        indicator "Num Lock" {
            !allowExplicit;
            whichModState= locked;
            modifiers= NumLock;
        };
        indicator "Scroll Lock" {
            whichModState= locked;
            modifiers= ScrollLock;
        };
        indicator "Shift Lock" {
            !allowExplicit;
            whichModState= locked;
            modifiers= Shift;
        };
        indicator "Group 2" {
            !allowExplicit;
            groups= 0xfe;
        };
        indicator "Mouse Keys" {
            indicatorDrivesKeyboard;
            controls= mouseKeys;
        };
    };

    xkb_symbols "pc_us_inet(evdev)_level3(switch)_capslock(swapescape)_compose(ralt)_epo(qwerty)_level5(lsgt_switch_" {

        name[group1]="Alphan";

        key <ESC> { [ Caps_Lock ] };
        key <AE01> { [ 1, exclam, onesubscript, onesuperior] };
        key <AE02> { [ 2, at, twosubscript, twosuperior ] };
        key <AE03> { [ 3, numbersign, threesubscript, threesuperior ] };
        key <AE04> { [ 4, dollar, foursubscript, foursuperior ] };
        key <AE05> { [ 5, percent, fivesubscript, fivesuperior ] };
        key <AE06> { [ 6, asciicircum, sixsubscript, sixsuperior ] };
        key <AE07> { [ 7, ampersand, sevensubscript, sevensuperior ] };
        key <AE08> { 
            symbols[Group1]= [ 8, asterisk, eightsubscript, eightsuperior ] ,
                symbols[Group2]= [ Prior]
        };
        key <AE09> {
            symbols[Group1]= [ 9, parenleft, ninesubscript, ninesuperior ],
            symbols[Group2]= [ Prior]
        };
        key <AE10> { 
            symbols[Group1]= [ 0, parenright, zerosubscript, zerosuperior ],
            symbols[Group2]= [ 0x08c2 ]
            // 0x08c2 is the infinity symbol. 
            // /usr/include/X11/keysymdef.h has such codes.
        };
        key <AE11> { 
            type= "FOUR_LEVEL",
            symbols[Group1]= [ minus, underscore, endash, emdash ] 
        };
        key <AE12> { [ equal, plus, notequal, plusminus ] };

        key <BKSP> { [ BackSpace ], [Delete] };
        key <TAB> { [ Tab, ISO_Left_Tab ] };
        key <AD01> {
            type= "ALPHABETIC",
                symbols[Group1]= [ q, Q ]
        };
        key <AD02> {
            type= "ALPHABETIC",
                symbols[Group1]= [ w, W ]
        };
        key <AD03> {
            type= "FOUR_LEVEL_ALPHABETIC",
                symbols[Group1]= [ e, E , 0x10003b5, 0x10020ac], // eps and eur
                symbols[Group2]= [ 0x1002203, 0x1002208, 0x1002204, 0x01002209]
                // there exists, element of and their respective negations
        };
        key <AD04> {
            type= "ALPHABETIC",
                symbols[Group1]= [ r, R ]
        };
        key <AD05> {
            type= "FOUR_LEVEL_ALPHABETIC",
                symbols[Group1]= [ t, T , 0x10020ba, 0x10003c4] // try sign and tau
        };
        key <AD06> {
            type= "ALPHABETIC",
                symbols[Group1]= [ y, Y ]
        };
        key <AD07> {
            type= "FOUR_LEVEL_ALPHABETIC",
                symbols[Group1]= [ u, U, udiaeresis, Udiaeresis ],
                symbols[Group2] = [0x100263a]//0x100263a is ☺, smiling face
        };
        key <AD08> {
            type[1]= "FOUR_LEVEL_ALPHABETIC",
                symbols[Group1]= [ i, I, idotless, Iabovedot ],
                type[2]="ONE_LEVEL",
                symbols[Group2]= [ osfUp]
        };
        key <AD09> {
            symbols[Group1]= [ o, O, odiaeresis, Odiaeresis ],
            symbols[Group2]= [ 0xfd01 ]
        };
        key <AD10> {
            type= "ALPHABETIC",
                symbols[Group1]= [ p, P ]
        };
        key <AD11> { [ bracketleft, braceleft ] };
        key <AD12> { [ bracketright, braceright ] };
        key <RTRN> { [ Return ] };
        key <LCTL> { [ Control_L ] };
        key <AC01> {
            type= "FOUR_LEVEL_ALPHABETIC",
                symbols[Group1]= [ a, A , adiaeresis, Adiaeresis ],
                symbols[Group2]= [ 0x1002200, A , adiaeresis, Adiaeresis ]
        };
        key <AC02> {
            type= "FOUR_LEVEL_ALPHABETIC",
                symbols[Group1]= [ s, S, scedilla, Scedilla ]
        };
        key <AC03> {
            type= "ALPHABETIC",
                symbols[Group1]= [ d, D ],
                symbols[Group2] = [0x101bf604, 0x101bf604]//0x101f604 is 😄 , laughing face
        };
        key <AC04> {
            type= "ALPHABETIC",
                symbols[Group1]= [ f, F ]
        };
        key <AC05> {
            type= "FOUR_LEVEL_ALPHABETIC",
                symbols[Group1]= [ g, G, gbreve, Gbreve ]
        };
        key <AC06> {
                symbols[Group1]= [ h, H],
                symbols[Group2]= [ Home]
        };
        key <AC07> {
            type[1]= "FOUR_LEVEL",
            symbols[Group1]= [ j, J, leftarrow, ifonlyif ],
            symbols[Group2]= [ osfLeft ]
        };
        key <AC08> {
            symbols[Group1]= [ k, K, downarrow, uparrow ],
            symbols[Group2]= [ osfDown]
        };
        key <AC09> {
            type[1]= "FOUR_LEVEL",
            symbols[Group1]= [ l, L, rightarrow, implies ],
            type[2]="ONE_LEVEL",
            symbols[Group2]= [ osfRight, osfRight, osfRight, osfRight ]
        };
        key <AC10> { 
            symbols[Group1]= [ semicolon, colon ],
            symbols[Group2]= [ End ]
        };
        key <AC11> { [ apostrophe, quotedbl ] };
        key <TLDE> { [ grave, asciitilde ] };
        key <LFSH> { [ ISO_Level3_Latch ] };

        key <BKSL> { [ backslash, bar, NoSymbol , 0x1002016] }; 
        // 0x1002016 is ‖ (double vertical bar)

        key <AB01> {
            type= "ALPHABETIC",
                symbols[Group1]= [ z, Z ]
        };
        key <AB02> {
            type= "FOUR_LEVEL_ALPHABETIC",
                symbols[Group1]= [ x, X, multiply, multiply ]
        };
        key <AB03> {
            type= "FOUR_LEVEL_ALPHABETIC",
                symbols[Group1]= [ c, C, ccedilla, Ccedilla ]
        };
        key <AB04> {
            type= "ALPHABETIC",
                symbols[Group1]= [ v, V ]
        };
        key <AB05> {
            type= "FOUR_LEVEL_ALPHABETIC",
                symbols[Group1]= [ b, B, ssharp,ssharp]
        };
        key <AB06> {
            type= "FOUR_LEVEL_ALPHABETIC",
                symbols[Group1]= [ n, N, intersection, union ],
                symbols[Group2]= [ 0xfd02 ]
        };
        key <AB07> {
            type= "ALPHABETIC",
                symbols[Group1]= [ m, M ]
        };
        key <AB08> {
            symbols[Group1]= [ comma, less, lessthanequal, includedin ],
            symbols[Group2]= [ Next]
        };
        key <AB09> { [ period, greater, greaterthanequal, includes ] };
        key <AB10> {
            type= "FOUR_LEVEL",
            symbols[Group1]= [ slash, question, division, division ]
            // "division" taken from /usr/include/X11/keysymdef.h
            // Drop the "XK_" prefix.
            // But... XK_infinity does not work.
        };
        key <RTSH> { [ ISO_Level3_Latch ] };
        #key <RTSH> { [ BackSpace ], [ Delete ] };
        key <VBS> { [ BackSpace ] };
        key <VDEL> { [ Delete ] };
        key <LALT> { [ Alt_L, Meta_L ] };
        key <SPCE> {
            symbols[Group1] = [ space ], 
                symbols[Group2] = [ Return ]
        };
        key <CAPS> { [ Escape ] };
        key <FK01> {
            type= "CTRL+ALT",
                symbols[Group1]= [ F1, F1, F1, F1, XF86Switch_VT_1 ]
        };
        key <FK02> {
            type= "CTRL+ALT",
                symbols[Group1]= [ F2, F2, F2, F2, XF86Switch_VT_2 ]
        };
        key <FK03> {
            type= "CTRL+ALT",
                symbols[Group1]= [ F3, F3, F3, F3, XF86Switch_VT_3 ]
        };
        key <FK04> {
            type= "CTRL+ALT",
                symbols[Group1]= [ F4, F4, F4, F4, XF86Switch_VT_4 ]
        };
        key <FK05> {
            type= "CTRL+ALT",
                symbols[Group1]= [ F5, F5, F5, F5, XF86Switch_VT_5 ]
        };
        key <FK06> {
            type= "CTRL+ALT",
                symbols[Group1]= [ F6, F6, F6, F6, XF86Switch_VT_6 ]
        };
        key <FK07> {
            type= "CTRL+ALT",
                symbols[Group1]= [ F7, F7, F7, F7, XF86Switch_VT_7 ]
        };
        key <FK08> {
            type= "CTRL+ALT",
                symbols[Group1]= [ F8, F8, F8, F8, XF86Switch_VT_8 ]
        };
        key <FK09> {
            type= "CTRL+ALT",
                symbols[Group1]= [ F9, F9, F9, F9, XF86Switch_VT_9 ]
        };
        key <FK10> {
            type= "CTRL+ALT",
                symbols[Group1]= [ F10, F10, F10, F10, XF86Switch_VT_10 ]
        };
        key <SCLK> { [ Scroll_Lock ] };
        key <LVL3> {
            type= "ONE_LEVEL",
                symbols[Group1]= [ ISO_Level3_Shift ]
        };
        key <LSGT> {
            type= "ONE_LEVEL",
                symbols[Group1]= [ Mode_switch ]
        };
        key <FK11> {
            type= "CTRL+ALT",
                symbols[Group1]= [ F11, F11, F11, F11, XF86Switch_VT_11 ]
        };
        key <FK12> {
            type= "CTRL+ALT",
                symbols[Group1]= [ F12, F12, F12, F12, XF86Switch_VT_12 ]
        };
        key <RCTL> { symbols[Group1]= [ Menu ] };
        key <PRSC> {
            symbols[Group1]= [ Control_L ]
//            // type= "PC_ALT_LEVEL2",
//            // symbols[Group1]= [ Print, Sys_Req ]
        };
        key <RALT> {
            type= "TWO_LEVEL",
                symbols[Group1]= [ Shift_L, Shift_L ]
        };
        key <LNFD> { [ Linefeed ] };
        key <HOME> { [ Home ] };
        key <UP> { [ Up ] };
        key <PGUP> { [ Prior ] };
        key <LEFT> { [ Left ] };
        key <RGHT> { [ Right ] };
        key <END> { [ End ] };
        key <DOWN> { [ Down ] };
        key <PGDN> { [ Next ] };
        key <INS> { [ Insert ] };
        key <DELE> { [ Delete ] };
        key <MUTE> { [ XF86AudioMute ] };
        key <VOL-> { [ XF86AudioLowerVolume ] };
        key <VOL+> { [ XF86AudioRaiseVolume ] };
        key <POWR> { [ XF86LaunchC ] };
        key <I126> { [ plusminus ] };
        key <PAUS> {
            type= "PC_CONTROL_LEVEL2",
                symbols[Group1]= [ Pause, Break ]
        };
        key <I128> { [ XF86LaunchA ] };
        key <I129> { [ KP_Decimal, KP_Decimal ] };
        key <HNGL> { [ Hangul ] };
        key <HJCV> { [ Hangul_Hanja ] };
        key <LWIN> { [ Super_L ] };
        key <RWIN> { [ Control_L ] };
        key <COMP> { [ Control_L ] };
        key <STOP> { [ Cancel ] };
        key <AGAI> { [ Redo ] };
        key <PROP> { [ SunProps ] };
        key <UNDO> { [ Undo ] };
        key <FRNT> { [ SunFront ] };
        key <COPY> { [ XF86Copy ] };
        key <OPEN> { [ XF86Open ] };
        key <PAST> { [ XF86Paste ] };
        key <FIND> { [ Find ] };
        key <CUT> { [ XF86Cut ] };
        key <HELP> { [ Help ] };
        key <I147> { [ XF86MenuKB ] };
        key <I148> { [ XF86Calculator ] };
        key <I150> { [ XF86Sleep ] };
        key <I151> { [ XF86WakeUp ] };
        key <I152> { [ XF86Explorer ] };
        key <I153> { [ XF86Send ] };
        key <I155> { [ XF86Xfer ] };
        key <I156> { [ XF86Launch1 ] };
        key <I157> { [ XF86Launch2 ] };
        key <I158> { [ XF86WWW ] };
        key <I159> { [ XF86DOS ] };
        key <I160> { [ XF86ScreenSaver ] };
        key <I161> { [ XF86RotateWindows ] };
        key <I162> { [ XF86TaskPane ] };
        key <I163> { [ XF86Mail ] };
        key <I164> { [ XF86Favorites ] };
        key <I165> { [ XF86MyComputer ] };
        key <I166> { [ XF86Back ] };
        key <I167> { [ XF86Forward ] };
        key <I169> { [ XF86Eject ] };
        key <I170> { [ XF86Eject, XF86Eject ] };
        key <I171> { [ XF86AudioNext ] };
        key <I172> { [ XF86AudioPlay, XF86AudioPause ] };
        key <I173> { [ XF86AudioPrev ] };
        key <I174> { [ XF86AudioStop, XF86Eject ] };
        key <I175> { [ XF86AudioRecord ] };
        key <I176> { [ XF86AudioRewind ] };
        key <I177> { [ XF86Phone ] };
        key <I179> { [ XF86Tools ] };
        key <I180> { [ XF86HomePage ] };
        key <I181> { [ XF86Reload ] };
        key <I182> { [ XF86Close ] };
        key <I185> { [ XF86ScrollUp ] };
        key <I186> { [ XF86ScrollDown ] };
        key <I187> { [ parenleft ] };
        key <I188> { [ parenright ] };
        key <I189> { [ XF86New ] };
        key <I190> { [ Redo ] };
        key <FK13> { [ XF86Tools ] };
        key <FK14> { [ XF86Launch5 ] };
        key <FK15> { [ XF86Launch6 ] };
        key <FK16> { [ XF86Launch7 ] };
        key <FK17> { [ XF86Launch8 ] };
        key <FK18> { [ XF86Launch9 ] };
        key <FK20> { [ XF86AudioMicMute ] };
        key <FK21> { [ XF86TouchpadToggle ] };
        key <FK22> { [ XF86TouchpadOn ] };
        key <FK23> { [ XF86TouchpadOff ] };
        key <MDSW> {
            type= "ONE_LEVEL",
                symbols[Group1]= [ ISO_Level5_Shift ]
        };
        key <ALT> { [ NoSymbol, Alt_L ] };
        key <META> { [ NoSymbol, Meta_L ] };
        key <SUPR> { [ NoSymbol, Super_L ] };
        key <HYPR> {
            type= "ONE_LEVEL",
                symbols[Group1]= [ NoSymbol ],
                actions[Group1]= [ SetMods(modifiers=NumLock) ]
        };
        key <I208> { [ XF86AudioPlay ] };
        key <I209> { [ XF86AudioPause ] };
        key <I210> { [ XF86Launch3 ] };
        key <I211> { [ XF86Launch4 ] };
        key <I212> { [ XF86LaunchB ] };
        key <I213> { [ XF86Suspend ] };
        key <I214> { [ XF86Close ] };
        key <I215> { [ XF86AudioPlay ] };
        key <I216> { [ XF86AudioForward ] };
        key <I218> { [ Print ] };
        key <I220> { [ XF86WebCam ] };
        key <I223> { [ XF86Mail ] };
        key <I224> { [ XF86Messenger ] };
        key <I225> { [ XF86Search ] };
        key <I226> { [ XF86Go ] };
        key <I227> { [ XF86Finance ] };
        key <I228> { [ XF86Game ] };
        key <I229> { [ XF86Shop ] };
        key <I231> { [ Cancel ] };
        key <I232> { [ XF86MonBrightnessDown ] };
        key <I233> { [ XF86MonBrightnessUp ] };
        key <I234> { [ XF86AudioMedia ] };
        key <I235> { [ XF86Display ] };
        key <I236> { [ XF86KbdLightOnOff ] };
        key <I237> { [ XF86KbdBrightnessDown ] };
        key <I238> { [ XF86KbdBrightnessUp ] };
        key <I239> { [ XF86Send ] };
        key <I240> { [ XF86Reply ] };
        key <I241> { [ XF86MailForward ] };
        key <I242> { [ XF86Save ] };
        key <I243> { [ XF86Documents ] };
        key <I244> { [ XF86Battery ] };
        key <I245> { [ XF86Bluetooth ] };
        key <I246> { [ XF86WLAN ] };
        modifier_map Control { <COMP> };
        modifier_map Control { <LCTL> };
        modifier_map Control { <PRSC> };
        modifier_map Control { <RWIN> };
        modifier_map Lock { <ESC> };
        modifier_map Mod1 { <LALT> };
        modifier_map Mod1 { <META> };
        modifier_map Mod2 { <HYPR> };
        modifier_map Mod3 { <MDSW> };
        modifier_map Mod4 { <LWIN> };
        modifier_map Mod4 { <SUPR> };
        modifier_map Mod5 { <LVL3> };
    };

};
